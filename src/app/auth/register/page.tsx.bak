'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useAuth } from '@/context/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Loader2 } from 'lucide-react';

const registerSchema = z
  .object({
    email: z.string().email('Ingresa un correo valido'),
    password: z.string().min(6, 'La contrasena debe tener al menos 6 caracteres'),
    displayName: z.string().min(1, 'Necesitamos un nombre para mostrar'),
    theme: z.enum(['default', 'tamara', 'carlos']).default('default'),
    avatarUrl: z.string().url('La URL debe ser valida').optional().or(z.literal('')),
    mode: z.enum(['create', 'join']).default('create'),
    coupleName: z.string().optional(),
    coupleCode: z.string().optional(),
  })
  .superRefine((values, ctx) => {
    if (values.mode === 'create') {
      if (!values.coupleName || values.coupleName.trim().length < 3) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'El nombre de la pareja necesita al menos 3 caracteres',
          path: ['coupleName'],
        });
      }
    } else {
      if (!values.coupleCode || values.coupleCode.trim().length < 4) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: 'Ingresa el codigo que recibiste',
          path: ['coupleCode'],
        });
      }
    }
  });

type RegisterFormValues = z.infer<typeof registerSchema>;

export default function RegisterPage() {
  const { session, isLoading: isAuthLoading, signUp, signIn } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const [mode, setMode] = useState<'create' | 'join'>('create');

  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      email: '',
      password: '',
      displayName: '',
      theme: 'default',
      avatarUrl: '',
      mode: 'create',
      coupleName: '',
      coupleCode: '',
    },
  });

  const isSubmitting = form.formState.isSubmitting;

  useEffect(() => {
    if (!isAuthLoading && session) {
      router.replace('/dashboard');
    }
  }, [session, isAuthLoading, router]);

  useEffect(() => {
    form.setValue('mode', mode);
  }, [mode, form]);

  const onSubmit = async (values: RegisterFormValues) => {
    try {
      const result = await signUp({
        email: values.email,
        password: values.password,
        displayName: values.displayName,
        avatarUrl: values.avatarUrl ? values.avatarUrl : null,
        theme: values.theme === 'default' ? null : values.theme,
        createCouple: values.mode === 'create',
        coupleName: values.coupleName,
        coupleCode: values.coupleCode,
      });

      let description = 'Ya puedes iniciar sesion con tu nueva cuenta.';
      if (values.mode === 'create' && result.inviteCode) {
        description = 'Comparte este codigo con tu pareja: ' + result.inviteCode;
      }

      toast({
        title: 'Registro exitoso',
        description,
      });

      try {
        await signIn(values.email, values.password);
        router.replace('/dashboard');
      } catch (signInError) {
        console.warn('El inicio de sesion posterior al registro fallo', signInError);
        toast({
          title: 'Confirma tu correo electronico',
          description: 'Revisa tu bandeja de entrada y luego inicia sesion.',
        });
        router.replace('/auth/login');
      }
    } catch (error) {
      console.error('Error al registrar', error);
      toast({
        title: 'No pudimos completar el registro',
        description: 'Revisa la informacion e intentalo nuevamente.',
        variant: 'destructive',
      });
    }
  };

  if (isAuthLoading || session) {
    return (
      <main className="flex min-h-screen items-center justify-center bg-background">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </main>
    );
  }

  return (
    <main className="flex min-h-screen items-center justify-center bg-background p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader>
          <CardTitle className="text-center text-2xl font-headline">Crea tu cuenta</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Correo electronico</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="tu@correo.com" autoComplete="email" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Contrasena</FormLabel>
                      <FormControl>
                        <Input type="password" placeholder="********" autoComplete="new-password" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="displayName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nombre para mostrar</FormLabel>
                      <FormControl>
                        <Input placeholder="Como te llamas?" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="theme"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Tema preferido</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecciona un tema" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="default">Automatico</SelectItem>
                          <SelectItem value="tamara">Tema Tamara</SelectItem>
                          <SelectItem value="carlos">Tema Carlos</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="avatarUrl"
                  render={({ field }) => (
                    <FormItem className="md:col-span-2">
                      <FormLabel>Avatar (opcional)</FormLabel>
                      <FormControl>
                        <Input placeholder="https://" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="space-y-3">
                <FormLabel>Como quieres conectarte?</FormLabel>
                <RadioGroup value={mode} onValueChange={(value) => setMode(value as 'create' | 'join')} className="flex flex-col gap-2 md:flex-row">
                  <FormItem className="flex items-center space-x-2 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="create" />
                    </FormControl>
                    <FormLabel className="font-normal">Crear una nueva pareja</FormLabel>
                  </FormItem>
                  <FormItem className="flex items-center space-x-2 space-y-0">
                    <FormControl>
                      <RadioGroupItem value="join" />
                    </FormControl>
                    <FormLabel className="font-normal">Unirme con un codigo existente</FormLabel>
                  </FormItem>
                </RadioGroup>
              </div>

              {mode === 'create' ? (
                <FormField
                  control={form.control}
                  name="coupleName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nombre de la pareja</FormLabel>
                      <FormControl>
                        <Input placeholder="Ej. Tam y Car" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              ) : (
                <FormField
                  control={form.control}
                  name="coupleCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Codigo de la pareja</FormLabel>
                      <FormControl>
                        <Input placeholder="Ingresa el codigo que te compartieron" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}

              <Button type="submit" className="w-full" disabled={isSubmitting}>
                {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                Crear cuenta
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </main>
  );
}


